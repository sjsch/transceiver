[{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:Exp\">Exp</a> f <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:emap\">emap</a> :: (a -&gt; b) -&gt; (b -&gt; a) -&gt; f a -&gt; f b</li></ul>","name":"Exp emap","module":"Data.Functor.Exp","link":"Data-Functor-Exp.html#t:Exp"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:ExpProfunctor\">ExpProfunctor</a> p <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:elmap\">elmap</a> :: (a -&gt; b) -&gt; (b -&gt; a) -&gt; p a c -&gt; p b c</li><li><a href=\"#v:ermap\">ermap</a> :: (a -&gt; b) -&gt; (b -&gt; a) -&gt; p c a -&gt; p c b</li></ul>","name":"ExpProfunctor elmap ermap","module":"Data.Functor.Exp","link":"Data-Functor-Exp.html#t:ExpProfunctor"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"Data-Functor-Exp.html#t:Exp\" title=\"Data.Functor.Exp\">Exp</a> f =&gt; <a href=\"#t:Combinable\">Combinable</a> f <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:combineId\">combineId</a> :: a -&gt; f a</li><li><a href=\"#v:combine\">combine</a> :: f a -&gt; f b -&gt; f (a, b)</li></ul>","name":"Combinable combineId combine","module":"Data.Functor.Exp","link":"Data-Functor-Exp.html#t:Combinable"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"Data-Functor-Exp.html#t:Combinable\" title=\"Data.Functor.Exp\">Combinable</a> f =&gt; <a href=\"#t:Pickable\">Pickable</a> f <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:pickId\">pickId</a> :: f <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Void.html#t:Void\" title=\"Data.Void\">Void</a></li><li><a href=\"#v:pick\">pick</a> :: f a -&gt; f b -&gt; f (<a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> a b)</li></ul>","name":"Pickable pickId pick","module":"Data.Functor.Exp","link":"Data-Functor-Exp.html#t:Pickable"},{"display_html":"<span class=\"keyword\">class</span> Divisible f =&gt; <a href=\"#t:Contramonad\">Contramonad</a> f <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:pairbind\">pairbind</a> :: f a -&gt; (a -&gt; f b) -&gt; f (a, b)</li></ul>","name":"Contramonad pairbind","module":"Data.Functor.Exp","link":"Data-Functor-Exp.html#t:Contramonad"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"Data-Functor-Exp.html#t:Combinable\" title=\"Data.Functor.Exp\">Combinable</a> f =&gt; <a href=\"#t:Constructable\">Constructable</a> f <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:construct\">construct</a> :: f a -&gt; (a -&gt; f b) -&gt; f (a, b)</li></ul>","name":"Constructable construct","module":"Data.Functor.Exp","link":"Data-Functor-Exp.html#t:Constructable"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:Stream\">Stream</a> s <span class=\"keyword\">where</span><ul class=\"subs\"><li><span class=\"keyword\">type</span> <a href=\"#t:Token\">Token</a> s</li><li><a href=\"#v:emptyStream\">emptyStream</a> :: s</li><li><a href=\"#v:appendStream\">appendStream</a> :: s -&gt; <a href=\"Data-Stream.html#t:Token\" title=\"Data.Stream\">Token</a> s -&gt; s</li><li><a href=\"#v:unconsStream\">unconsStream</a> :: s -&gt; <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/GHC-Maybe.html#t:Maybe\" title=\"GHC.Maybe\">Maybe</a> (<a href=\"Data-Stream.html#t:Token\" title=\"Data.Stream\">Token</a> s, s)</li></ul>","name":"Stream Token emptyStream appendStream unconsStream","module":"Data.Stream","link":"Data-Stream.html#t:Stream"},{"display_html":"<a href=\"#v:manyE\">manyE</a> :: <a href=\"Data-Functor-Exp.html#t:Pickable\" title=\"Data.Functor.Exp\">Pickable</a> f =&gt; f a -&gt; f [a]","name":"manyE","module":"Transceiver.Combinators","link":"Transceiver-Combinators.html#v:manyE"},{"display_html":"<a href=\"#v:someE\">someE</a> :: <a href=\"Data-Functor-Exp.html#t:Pickable\" title=\"Data.Functor.Exp\">Pickable</a> f =&gt; f a -&gt; f (<a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-List-NonEmpty.html#t:NonEmpty\" title=\"Data.List.NonEmpty\">NonEmpty</a> a)","name":"someE","module":"Transceiver.Combinators","link":"Transceiver-Combinators.html#v:someE"},{"display_html":"<a href=\"#v:untilE\">untilE</a> :: <a href=\"Data-Functor-Exp.html#t:Pickable\" title=\"Data.Functor.Exp\">Pickable</a> f =&gt; f a -&gt; f b -&gt; f ([a], b)","name":"untilE","module":"Transceiver.Combinators","link":"Transceiver-Combinators.html#v:untilE"},{"display_html":"<a href=\"#v:until1E\">until1E</a> :: <a href=\"Data-Functor-Exp.html#t:Pickable\" title=\"Data.Functor.Exp\">Pickable</a> f =&gt; f a -&gt; f b -&gt; f (<a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-List-NonEmpty.html#t:NonEmpty\" title=\"Data.List.NonEmpty\">NonEmpty</a> a, b)","name":"until1E","module":"Transceiver.Combinators","link":"Transceiver-Combinators.html#v:until1E"},{"display_html":"<a href=\"#v:optional\">optional</a> :: <a href=\"Data-Functor-Exp.html#t:Pickable\" title=\"Data.Functor.Exp\">Pickable</a> f =&gt; f a -&gt; f (<a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/GHC-Maybe.html#t:Maybe\" title=\"GHC.Maybe\">Maybe</a> a)","name":"optional","module":"Transceiver.Combinators","link":"Transceiver-Combinators.html#v:optional"},{"display_html":"<a href=\"#v:repeatN\">repeatN</a> :: <a href=\"Data-Functor-Exp.html#t:Combinable\" title=\"Data.Functor.Exp\">Combinable</a> f =&gt; <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Int.html#t:Int\" title=\"Data.Int\">Int</a> -&gt; f a -&gt; f [a]","name":"repeatN","module":"Transceiver.Combinators","link":"Transceiver-Combinators.html#v:repeatN"},{"display_html":"<a href=\"#v:constant\">constant</a> :: <a href=\"Data-Functor-Exp.html#t:Exp\" title=\"Data.Functor.Exp\">Exp</a> f =&gt; a -&gt; f a -&gt; f ()","name":"constant","module":"Transceiver.Combinators","link":"Transceiver-Combinators.html#v:constant"},{"display_html":"<a href=\"#v:padding\">padding</a> :: <a href=\"Data-Functor-Exp.html#t:Combinable\" title=\"Data.Functor.Exp\">Combinable</a> f =&gt; <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Int.html#t:Int\" title=\"Data.Int\">Int</a> -&gt; a -&gt; f a -&gt; f ()","name":"padding","module":"Transceiver.Combinators","link":"Transceiver-Combinators.html#v:padding"},{"display_html":"<a href=\"#v:sequenceL\">sequenceL</a> :: <a href=\"Data-Functor-Exp.html#t:Combinable\" title=\"Data.Functor.Exp\">Combinable</a> f =&gt; f a -&gt; f () -&gt; f a","name":"sequenceL","module":"Transceiver.Combinators","link":"Transceiver-Combinators.html#v:sequenceL"},{"display_html":"<a href=\"#v:sequenceR\">sequenceR</a> :: <a href=\"Data-Functor-Exp.html#t:Combinable\" title=\"Data.Functor.Exp\">Combinable</a> f =&gt; f () -&gt; f a -&gt; f a","name":"sequenceR","module":"Transceiver.Combinators","link":"Transceiver-Combinators.html#v:sequenceR"},{"display_html":"<a href=\"#v:sepBy\">sepBy</a> :: <a href=\"Data-Functor-Exp.html#t:Pickable\" title=\"Data.Functor.Exp\">Pickable</a> f =&gt; f a -&gt; f () -&gt; f [a]","name":"sepBy","module":"Transceiver.Combinators","link":"Transceiver-Combinators.html#v:sepBy"},{"display_html":"<a href=\"#v:sepBy1\">sepBy1</a> :: <a href=\"Data-Functor-Exp.html#t:Pickable\" title=\"Data.Functor.Exp\">Pickable</a> f =&gt; f a -&gt; f () -&gt; f (<a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-List-NonEmpty.html#t:NonEmpty\" title=\"Data.List.NonEmpty\">NonEmpty</a> a)","name":"sepBy1","module":"Transceiver.Combinators","link":"Transceiver-Combinators.html#v:sepBy1"},{"display_html":"<a href=\"#v:between\">between</a> :: <a href=\"Data-Functor-Exp.html#t:Combinable\" title=\"Data.Functor.Exp\">Combinable</a> f =&gt; f () -&gt; f () -&gt; f a -&gt; f a","name":"between","module":"Transceiver.Combinators","link":"Transceiver-Combinators.html#v:between"},{"display_html":"<a href=\"#v:fld\">fld</a> :: <span class=\"keyword\">forall</span> (k :: <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/GHC-TypeLits.html#t:Symbol\" title=\"GHC.TypeLits\">Symbol</a>) v f. <a href=\"Data-Functor-Exp.html#t:Exp\" title=\"Data.Functor.Exp\">Exp</a> f =&gt; f v -&gt; f (NMap '[k :-&gt; v])","name":"fld","module":"Transceiver.Fields","link":"Transceiver-Fields.html#v:fld"},{"display_html":"<a href=\"#v:con\">con</a> :: <span class=\"keyword\">forall</span> k v f. <a href=\"Data-Functor-Exp.html#t:Exp\" title=\"Data.Functor.Exp\">Exp</a> f =&gt; f v -&gt; f (NSum '[k :-&gt; v])","name":"con","module":"Transceiver.Fields","link":"Transceiver-Fields.html#v:con"},{"display_html":"<a href=\"#v:-124--38--124-\">(|&amp;|)</a> :: <span class=\"keyword\">forall</span> (xs :: [Mapping <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/GHC-TypeLits.html#t:Symbol\" title=\"GHC.TypeLits\">Symbol</a> *]) (ys :: [Mapping <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/GHC-TypeLits.html#t:Symbol\" title=\"GHC.TypeLits\">Symbol</a> *]) f. (SingI xs, SingI ys, <a href=\"Data-Functor-Exp.html#t:Combinable\" title=\"Data.Functor.Exp\">Combinable</a> f) =&gt; f (NMap xs) -&gt; f (NMap ys) -&gt; f (NMap (Union xs ys))","name":"|&|","module":"Transceiver.Fields","link":"Transceiver-Fields.html#v:-124--38--124-"},{"display_html":"<a href=\"#v:-124--47--124-\">(|/|)</a> :: <span class=\"keyword\">forall</span> (xs :: [Mapping <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/GHC-TypeLits.html#t:Symbol\" title=\"GHC.TypeLits\">Symbol</a> *]) (ys :: [Mapping <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/GHC-TypeLits.html#t:Symbol\" title=\"GHC.TypeLits\">Symbol</a> *]) f. (SingI xs, SingI ys, <a href=\"Data-Functor-Exp.html#t:Pickable\" title=\"Data.Functor.Exp\">Pickable</a> f) =&gt; f (NSum xs) -&gt; f (NSum ys) -&gt; f (NSum (Union xs ys))","name":"|/|","module":"Transceiver.Fields","link":"Transceiver-Fields.html#v:-124--47--124-"},{"display_html":"<a href=\"#v:-61--38-\">(=&amp;)</a> :: <span class=\"keyword\">forall</span> n a f. <a href=\"Data-Functor-Exp.html#t:Exp\" title=\"Data.Functor.Exp\">Exp</a> f =&gt; f a -&gt; FieldLabel n -&gt; f (NMap '[n :-&gt; a])","name":"=&","module":"Transceiver.Fields","link":"Transceiver-Fields.html#v:-61--38-"},{"display_html":"<a href=\"#v:-61--47-\">(=/)</a> :: <span class=\"keyword\">forall</span> n a f. <a href=\"Data-Functor-Exp.html#t:Exp\" title=\"Data.Functor.Exp\">Exp</a> f =&gt; f a -&gt; FieldLabel n -&gt; f (NSum '[n :-&gt; a])","name":"=/","module":"Transceiver.Fields","link":"Transceiver-Fields.html#v:-61--47-"},{"display_html":"<a href=\"#v:pmap\">pmap</a> :: (<a href=\"Data-Functor-Exp.html#t:Exp\" title=\"Data.Functor.Exp\">Exp</a> f, <a href=\"Transceiver-Fields.html#t:Generic\" title=\"Transceiver.Fields\">Generic</a> a, GenProduct (<a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/GHC-Generics.html#t:Rep\" title=\"GHC.Generics\">Rep</a> a)) =&gt; f (NMap (GProduct (<a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/GHC-Generics.html#t:Rep\" title=\"GHC.Generics\">Rep</a> a))) -&gt; f a","name":"pmap","module":"Transceiver.Fields","link":"Transceiver-Fields.html#v:pmap"},{"display_html":"<a href=\"#v:smap\">smap</a> :: (<a href=\"Data-Functor-Exp.html#t:Exp\" title=\"Data.Functor.Exp\">Exp</a> f, <a href=\"Transceiver-Fields.html#t:Generic\" title=\"Transceiver.Fields\">Generic</a> a, GenSum (<a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/GHC-Generics.html#t:Rep\" title=\"GHC.Generics\">Rep</a> a)) =&gt; f (NSum (GSum (<a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/GHC-Generics.html#t:Rep\" title=\"GHC.Generics\">Rep</a> a))) -&gt; f a","name":"smap","module":"Transceiver.Fields","link":"Transceiver-Fields.html#v:smap"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:Generic\">Generic</a> a","name":"Generic","module":"Transceiver.Fields","link":"Transceiver-Fields.html#t:Generic"},{"display_html":"<a href=\"#v:gmap\">gmap</a> :: (<a href=\"Data-Functor-Exp.html#t:Exp\" title=\"Data.Functor.Exp\">Exp</a> f, <a href=\"Transceiver-Fields.html#t:Generic\" title=\"Transceiver.Fields\">Generic</a> a, Generalizable' (<a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/GHC-Generics.html#t:Rep\" title=\"GHC.Generics\">Rep</a> a)) =&gt; f (Generalized (<a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/GHC-Generics.html#t:Rep\" title=\"GHC.Generics\">Rep</a> a)) -&gt; f a","name":"gmap","module":"Transceiver.Iso","link":"Transceiver-Iso.html#v:gmap"},{"display_html":"<a href=\"#v:-124--42--124-\">(|*|)</a> :: <a href=\"Data-Functor-Exp.html#t:Combinable\" title=\"Data.Functor.Exp\">Combinable</a> f =&gt; f a -&gt; f b -&gt; f (a, b)","name":"|*|","module":"Transceiver.Operators","link":"Transceiver-Operators.html#v:-124--42--124-"},{"display_html":"<a href=\"#v:-124--43--124-\">(|+|)</a> :: <a href=\"Data-Functor-Exp.html#t:Pickable\" title=\"Data.Functor.Exp\">Pickable</a> f =&gt; f a -&gt; f b -&gt; f (<a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> a b)","name":"|+|","module":"Transceiver.Operators","link":"Transceiver-Operators.html#v:-124--43--124-"},{"display_html":"<a href=\"#v:-124--60--124-\">(|&lt;|)</a> :: <a href=\"Data-Functor-Exp.html#t:Combinable\" title=\"Data.Functor.Exp\">Combinable</a> f =&gt; f a -&gt; f () -&gt; f a","name":"|<|","module":"Transceiver.Operators","link":"Transceiver-Operators.html#v:-124--60--124-"},{"display_html":"<a href=\"#v:-124--62--124-\">(|&gt;|)</a> :: <a href=\"Data-Functor-Exp.html#t:Combinable\" title=\"Data.Functor.Exp\">Combinable</a> f =&gt; f () -&gt; f a -&gt; f a","name":"|>|","module":"Transceiver.Operators","link":"Transceiver-Operators.html#v:-124--62--124-"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:Parser\">Parser</a> s a = <a href=\"#v:Parser\">Parser</a> (s -&gt; <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/GHC-Maybe.html#t:Maybe\" title=\"GHC.Maybe\">Maybe</a> (a, s))","name":"Parser Parser","module":"Transceiver.Parser","link":"Transceiver-Parser.html#t:Parser"},{"display_html":"<a href=\"#v:parseToken\">parseToken</a> :: <a href=\"Data-Stream.html#t:Stream\" title=\"Data.Stream\">Stream</a> s =&gt; <a href=\"Transceiver-Parser.html#t:Parser\" title=\"Transceiver.Parser\">Parser</a> s (<a href=\"Data-Stream.html#t:Token\" title=\"Data.Stream\">Token</a> s)","name":"parseToken","module":"Transceiver.Parser","link":"Transceiver-Parser.html#v:parseToken"},{"display_html":"<a href=\"#v:parseEof\">parseEof</a> :: <a href=\"Data-Stream.html#t:Stream\" title=\"Data.Stream\">Stream</a> s =&gt; <a href=\"Transceiver-Parser.html#t:Parser\" title=\"Transceiver.Parser\">Parser</a> s ()","name":"parseEof","module":"Transceiver.Parser","link":"Transceiver-Parser.html#v:parseEof"},{"display_html":"<a href=\"#v:parseSatisfy\">parseSatisfy</a> :: <a href=\"Data-Stream.html#t:Stream\" title=\"Data.Stream\">Stream</a> s =&gt; <a href=\"Transceiver-Parser.html#t:Parser\" title=\"Transceiver.Parser\">Parser</a> s a -&gt; (a -&gt; <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a>) -&gt; <a href=\"Transceiver-Parser.html#t:Parser\" title=\"Transceiver.Parser\">Parser</a> s a","name":"parseSatisfy","module":"Transceiver.Parser","link":"Transceiver-Parser.html#v:parseSatisfy"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:Printer\">Printer</a> s a = <a href=\"#v:Printer\">Printer</a> (a -&gt; s -&gt; s)","name":"Printer Printer","module":"Transceiver.Printer","link":"Transceiver-Printer.html#t:Printer"},{"display_html":"<a href=\"#v:printToken\">printToken</a> :: <a href=\"Data-Stream.html#t:Stream\" title=\"Data.Stream\">Stream</a> s =&gt; <a href=\"Transceiver-Printer.html#t:Printer\" title=\"Transceiver.Printer\">Printer</a> s (<a href=\"Data-Stream.html#t:Token\" title=\"Data.Stream\">Token</a> s)","name":"printToken","module":"Transceiver.Printer","link":"Transceiver-Printer.html#v:printToken"},{"display_html":"<a href=\"#v:printEof\">printEof</a> :: <a href=\"Data-Stream.html#t:Stream\" title=\"Data.Stream\">Stream</a> s =&gt; <a href=\"Transceiver-Printer.html#t:Printer\" title=\"Transceiver.Printer\">Printer</a> s ()","name":"printEof","module":"Transceiver.Printer","link":"Transceiver-Printer.html#v:printEof"},{"display_html":"<a href=\"#v:printInsert\">printInsert</a> :: <a href=\"Data-Stream.html#t:Stream\" title=\"Data.Stream\">Stream</a> s =&gt; <a href=\"Data-Stream.html#t:Token\" title=\"Data.Stream\">Token</a> s -&gt; <a href=\"Transceiver-Printer.html#t:Printer\" title=\"Transceiver.Printer\">Printer</a> s ()","name":"printInsert","module":"Transceiver.Printer","link":"Transceiver-Printer.html#v:printInsert"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:Syntax\">Syntax</a> s a = <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Functor-Product.html#t:Product\" title=\"Data.Functor.Product\">Product</a> (<a href=\"Transceiver-Parser.html#t:Parser\" title=\"Transceiver.Parser\">Parser</a> s) (<a href=\"Transceiver-Printer.html#t:Printer\" title=\"Transceiver.Printer\">Printer</a> s) a","name":"Syntax","module":"Transceiver.Syntax","link":"Transceiver-Syntax.html#t:Syntax"},{"display_html":"<a href=\"#v:token\">token</a> :: <a href=\"Data-Stream.html#t:Stream\" title=\"Data.Stream\">Stream</a> s =&gt; <a href=\"Transceiver-Syntax.html#t:Syntax\" title=\"Transceiver.Syntax\">Syntax</a> s (<a href=\"Data-Stream.html#t:Token\" title=\"Data.Stream\">Token</a> s)","name":"token","module":"Transceiver.Syntax","link":"Transceiver-Syntax.html#v:token"},{"display_html":"<a href=\"#v:runParser-39-\">runParser'</a> :: <a href=\"Transceiver-Syntax.html#t:Syntax\" title=\"Transceiver.Syntax\">Syntax</a> s a -&gt; s -&gt; <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/GHC-Maybe.html#t:Maybe\" title=\"GHC.Maybe\">Maybe</a> (a, s)","name":"runParser'","module":"Transceiver.Syntax","link":"Transceiver-Syntax.html#v:runParser-39-"},{"display_html":"<a href=\"#v:runPrinter-39-\">runPrinter'</a> :: <a href=\"Transceiver-Syntax.html#t:Syntax\" title=\"Transceiver.Syntax\">Syntax</a> s a -&gt; a -&gt; s -&gt; s","name":"runPrinter'","module":"Transceiver.Syntax","link":"Transceiver-Syntax.html#v:runPrinter-39-"},{"display_html":"<a href=\"#v:runParser\">runParser</a> :: <a href=\"Transceiver-Syntax.html#t:Syntax\" title=\"Transceiver.Syntax\">Syntax</a> s a -&gt; s -&gt; <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/GHC-Maybe.html#t:Maybe\" title=\"GHC.Maybe\">Maybe</a> a","name":"runParser","module":"Transceiver.Syntax","link":"Transceiver-Syntax.html#v:runParser"},{"display_html":"<a href=\"#v:runPrinter\">runPrinter</a> :: <a href=\"Data-Stream.html#t:Stream\" title=\"Data.Stream\">Stream</a> s =&gt; <a href=\"Transceiver-Syntax.html#t:Syntax\" title=\"Transceiver.Syntax\">Syntax</a> s a -&gt; a -&gt; s","name":"runPrinter","module":"Transceiver.Syntax","link":"Transceiver-Syntax.html#v:runPrinter"},{"display_html":"<a href=\"#v:eof\">eof</a> :: <a href=\"Data-Stream.html#t:Stream\" title=\"Data.Stream\">Stream</a> s =&gt; <a href=\"Transceiver-Syntax.html#t:Syntax\" title=\"Transceiver.Syntax\">Syntax</a> s ()","name":"eof","module":"Transceiver.Syntax","link":"Transceiver-Syntax.html#v:eof"},{"display_html":"<a href=\"#v:literal\">literal</a> :: (<a href=\"Data-Stream.html#t:Stream\" title=\"Data.Stream\">Stream</a> s, <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Eq.html#t:Eq\" title=\"Data.Eq\">Eq</a> (<a href=\"Data-Stream.html#t:Token\" title=\"Data.Stream\">Token</a> s)) =&gt; s -&gt; <a href=\"Transceiver-Syntax.html#t:Syntax\" title=\"Transceiver.Syntax\">Syntax</a> s ()","name":"literal","module":"Transceiver.Syntax","link":"Transceiver-Syntax.html#v:literal"},{"display_html":"<a href=\"#v:exactToken\">exactToken</a> :: (<a href=\"Data-Stream.html#t:Stream\" title=\"Data.Stream\">Stream</a> s, <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Eq.html#t:Eq\" title=\"Data.Eq\">Eq</a> (<a href=\"Data-Stream.html#t:Token\" title=\"Data.Stream\">Token</a> s)) =&gt; <a href=\"Data-Stream.html#t:Token\" title=\"Data.Stream\">Token</a> s -&gt; <a href=\"Transceiver-Syntax.html#t:Syntax\" title=\"Transceiver.Syntax\">Syntax</a> s ()","name":"exactToken","module":"Transceiver.Syntax","link":"Transceiver-Syntax.html#v:exactToken"},{"display_html":"<a href=\"#v:satisfy\">satisfy</a> :: <a href=\"Data-Stream.html#t:Stream\" title=\"Data.Stream\">Stream</a> s =&gt; (a -&gt; <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a>) -&gt; <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Functor-Product.html#t:Product\" title=\"Data.Functor.Product\">Product</a> (<a href=\"Transceiver-Parser.html#t:Parser\" title=\"Transceiver.Parser\">Parser</a> s) g a -&gt; <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Functor-Product.html#t:Product\" title=\"Data.Functor.Product\">Product</a> (<a href=\"Transceiver-Parser.html#t:Parser\" title=\"Transceiver.Parser\">Parser</a> s) g a","name":"satisfy","module":"Transceiver.Syntax","link":"Transceiver-Syntax.html#v:satisfy"},{"display_html":"module <a href=\"Data-Stream.html\">Data.Stream</a>","name":"","module":"Transceiver","link":""},{"display_html":"module <a href=\"Data-Functor-Exp.html\">Data.Functor.Exp</a>","name":"","module":"Transceiver","link":""},{"display_html":"module <a href=\"Transceiver-Parser.html\">Transceiver.Parser</a>","name":"","module":"Transceiver","link":""},{"display_html":"module <a href=\"Transceiver-Printer.html\">Transceiver.Printer</a>","name":"","module":"Transceiver","link":""},{"display_html":"module <a href=\"Transceiver-Syntax.html\">Transceiver.Syntax</a>","name":"","module":"Transceiver","link":""},{"display_html":"module <a href=\"Transceiver-Combinators.html\">Transceiver.Combinators</a>","name":"","module":"Transceiver","link":""},{"display_html":"module <a href=\"Transceiver-Iso.html\">Transceiver.Iso</a>","name":"","module":"Transceiver","link":""},{"display_html":"module <a href=\"Transceiver-Fields.html\">Transceiver.Fields</a>","name":"","module":"Transceiver","link":""},{"display_html":"module <a href=\"Transceiver-Operators.html\">Transceiver.Operators</a>","name":"","module":"Transceiver","link":""},{"display_html":"<a href=\"#v:natural\">natural</a> :: (<a href=\"Data-Stream.html#t:Stream\" title=\"Data.Stream\">Stream</a> s, <a href=\"Data-Stream.html#t:Token\" title=\"Data.Stream\">Token</a> s ~ <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Char.html#t:Char\" title=\"Data.Char\">Char</a>, <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Text-Read.html#t:Read\" title=\"Text.Read\">Read</a> n, <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Text-Show.html#t:Show\" title=\"Text.Show\">Show</a> n, <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#t:Integral\" title=\"Prelude\">Integral</a> n) =&gt; <a href=\"Transceiver-Syntax.html#t:Syntax\" title=\"Transceiver.Syntax\">Syntax</a> s n","name":"natural","module":"Transceiver.Syntax.Char","link":"Transceiver-Syntax-Char.html#v:natural"},{"display_html":"<a href=\"#v:signed\">signed</a> :: (<a href=\"Data-Stream.html#t:Stream\" title=\"Data.Stream\">Stream</a> s, <a href=\"Data-Stream.html#t:Token\" title=\"Data.Stream\">Token</a> s ~ <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Char.html#t:Char\" title=\"Data.Char\">Char</a>, <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#t:Num\" title=\"Prelude\">Num</a> a, <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Ord.html#t:Ord\" title=\"Data.Ord\">Ord</a> a) =&gt; <a href=\"Transceiver-Syntax.html#t:Syntax\" title=\"Transceiver.Syntax\">Syntax</a> s a -&gt; <a href=\"Transceiver-Syntax.html#t:Syntax\" title=\"Transceiver.Syntax\">Syntax</a> s a","name":"signed","module":"Transceiver.Syntax.Char","link":"Transceiver-Syntax-Char.html#v:signed"},{"display_html":"<a href=\"#v:float\">float</a> :: (<a href=\"Data-Stream.html#t:Stream\" title=\"Data.Stream\">Stream</a> s, <a href=\"Data-Stream.html#t:Token\" title=\"Data.Stream\">Token</a> s ~ <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Char.html#t:Char\" title=\"Data.Char\">Char</a>) =&gt; <a href=\"Transceiver-Syntax.html#t:Syntax\" title=\"Transceiver.Syntax\">Syntax</a> s <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#t:Double\" title=\"Prelude\">Double</a>","name":"float","module":"Transceiver.Syntax.Char","link":"Transceiver-Syntax-Char.html#v:float"},{"display_html":"<a href=\"#v:escapedChar\">escapedChar</a> :: (<a href=\"Data-Stream.html#t:Stream\" title=\"Data.Stream\">Stream</a> s, <a href=\"Data-Stream.html#t:Token\" title=\"Data.Stream\">Token</a> s ~ <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Char.html#t:Char\" title=\"Data.Char\">Char</a>) =&gt; <a href=\"Transceiver-Syntax.html#t:Syntax\" title=\"Transceiver.Syntax\">Syntax</a> s <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Char.html#t:Char\" title=\"Data.Char\">Char</a>","name":"escapedChar","module":"Transceiver.Syntax.Char","link":"Transceiver-Syntax-Char.html#v:escapedChar"},{"display_html":"<a href=\"#v:stringLit\">stringLit</a> :: (<a href=\"Data-Stream.html#t:Stream\" title=\"Data.Stream\">Stream</a> s, <a href=\"Data-Stream.html#t:Token\" title=\"Data.Stream\">Token</a> s ~ <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Char.html#t:Char\" title=\"Data.Char\">Char</a>) =&gt; <a href=\"Transceiver-Syntax.html#t:Syntax\" title=\"Transceiver.Syntax\">Syntax</a> s <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-String.html#t:String\" title=\"Data.String\">String</a>","name":"stringLit","module":"Transceiver.Syntax.Char","link":"Transceiver-Syntax-Char.html#v:stringLit"},{"display_html":"<a href=\"#v:syntaxLE\">syntaxLE</a> :: <span class=\"keyword\">forall</span> n s. (<a href=\"Data-Stream.html#t:Stream\" title=\"Data.Stream\">Stream</a> s, <a href=\"Data-Stream.html#t:Token\" title=\"Data.Stream\">Token</a> s ~ <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Word.html#t:Word8\" title=\"Data.Word\">Word8</a>, <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Bits.html#t:FiniteBits\" title=\"Data.Bits\">FiniteBits</a> n, <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#t:Integral\" title=\"Prelude\">Integral</a> n, <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#t:Num\" title=\"Prelude\">Num</a> n) =&gt; <a href=\"Transceiver-Syntax.html#t:Syntax\" title=\"Transceiver.Syntax\">Syntax</a> s n","name":"syntaxLE","module":"Transceiver.Syntax.Word8","link":"Transceiver-Syntax-Word8.html#v:syntaxLE"},{"display_html":"<a href=\"#v:asciiNatural\">asciiNatural</a> :: (<a href=\"Data-Stream.html#t:Stream\" title=\"Data.Stream\">Stream</a> s, <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#t:Integral\" title=\"Prelude\">Integral</a> b, <a href=\"Data-Stream.html#t:Token\" title=\"Data.Stream\">Token</a> s ~ b, <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Text-Read.html#t:Read\" title=\"Text.Read\">Read</a> n, <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Text-Show.html#t:Show\" title=\"Text.Show\">Show</a> n, <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#t:Integral\" title=\"Prelude\">Integral</a> n) =&gt; <a href=\"Transceiver-Syntax.html#t:Syntax\" title=\"Transceiver.Syntax\">Syntax</a> s n","name":"asciiNatural","module":"Transceiver.Syntax.Word8","link":"Transceiver-Syntax-Word8.html#v:asciiNatural"},{"display_html":"<a href=\"#v:lenList\">lenList</a> :: (<a href=\"Data-Stream.html#t:Stream\" title=\"Data.Stream\">Stream</a> s, <a href=\"Data-Stream.html#t:Token\" title=\"Data.Stream\">Token</a> s ~ <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Word.html#t:Word8\" title=\"Data.Word\">Word8</a>, <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Bits.html#t:FiniteBits\" title=\"Data.Bits\">FiniteBits</a> n, <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#t:Integral\" title=\"Prelude\">Integral</a> n, <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#t:Num\" title=\"Prelude\">Num</a> n) =&gt; <a href=\"Transceiver-Syntax.html#t:Syntax\" title=\"Transceiver.Syntax\">Syntax</a> s n -&gt; <a href=\"Transceiver-Syntax.html#t:Syntax\" title=\"Transceiver.Syntax\">Syntax</a> s a -&gt; <a href=\"Transceiver-Syntax.html#t:Syntax\" title=\"Transceiver.Syntax\">Syntax</a> s [a]","name":"lenList","module":"Transceiver.Syntax.Word8","link":"Transceiver-Syntax-Word8.html#v:lenList"}]